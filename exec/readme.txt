
MCS/Executive Software
Version 0.4 FIXME
S.W. Ellingson
March 08, 2011 FIXME


Table of Contents 
=================
Notable Changes in this Version 
Introduction & Overview
File Inventory / Directory Structure
Quick Start
One-Shot Acquisition with meosx
Monitoring & Control of the DP Subsystem
Troubleshooting / Known Bugs
Other Notes & Issues
History


Notable Changes in This Version
===============================

me_getaltaz(x)
mefsdfg
FIXME mers -- deprecated
FIXME meis -- deprecated
FIXME me
FIXME meei(x)
FIXME me_init
FIXME me_tpcom
FIXME me_crash.sh
FIXME Can't do meosx, mesix etc when ms_exec is running.  Need an architecture discussion

mcs.h -- select one of the LAN configurations 

1. Bugs in the mcs.h functions LWA_time2tv() and LWA_timeval() functions (causing MJDs to be off by 2 days in some cases) were corrected.

2. See "History" for documentation of previous releases.


Introduction & Overview
=======================

This is software developed for the MCS "Executive" computer.  The Executive computer accepts commands from the MCS "Task Processor" computer (or, for development/testing purposes, directly through a command line interface) and communicates with MCS/Scheduler (normally, a separate computer with separate software).  MCS/Scheduler v.0.9 is required.  

This software is considered "alpha". It is functional and released to facilitate review and comment; but not all required features are implemented.  Specifically, this is a fragmentary release that does include the main functionality of MCS/Executive as it is to be used in routine post-IOC operation.  However this release does provide various executables and scripts which facilitate automation of common tasks such as data acquisition, as well as providing support for beamforming ("DRX") modes which is not possible using the "msei" software distributed with MCS/Scheduler.     

Because this software communicates exclusively with MCS/Scheduler to get things done, it is pretty important that users/developers of MCS/Executive software have a good understanding of MCS/Scheduler software.  Please start with the MCS/Scheduler readme before trying out this software.  The remainder of this readme assumes you are either already familiar with MCS/Scheduler and/or that you have read the MCS/Scheduler readme and have a proper working MCS/Scheduler setup. 

Like MCS/Scheduler, this software is designed such that everything -- Executive, Scheduler, even subsystem MCSs and emulators thereof -- can be run on a single computer without modification; the difference between having these things on separate computers (as in the actual station) and "everything on a single PC" operation is simply whether interprocess communications are directed to separate computers using network IP addresses, or to local processes using the loopback (127.0.0.1) IP address, respectively.

The software is written entirely in ANSI C and was developed on Ubuntu Linux 10.10.  As with MCS/Scheduler, shell and python scripts are used for demonstration and testing.  

The easiest way to describe the capabilities and limitations of this release is simply to list the major executables and what they do:

-- mesix: Used to inject commands into MCS/Scheduler's ms_exec process.  This works like MCS/Scheduler's "msei" utility, but has extended capabilities, including support for the DP FST, BAM, and DRX commands, and allows allows commands to be scheduled for execution at a future time.

-- memdrex:  Used to query ms_mdre_ip (the MCS/Scheduler IP-based subsystem MIB interface).  This works like MCS/Scheduler's "ms_mdre" executable, but does not return the value of the MIB entry; only the update date/time.  "memdrex" is *not* intended to replace ms_mdre; rather it is intended exclusively for development of MCS/Executive software.
 
-- meosx:  This is "one-shot" acquisition software.  This allows acquisitions in TBW, TBN, or DRX mode from a single command line.  Note that the "DRX" (beamforming) mode has not yet been tested with actual DP subsystem.

-- mecfg, medfg, and megfg:  These are utility programs that convert text-formatted beamforming parameters into the raw binary format required by DP for the commands FST and BAM.  The names of files generated by these utilities can be passed as command line arguments to the "mesix" utility in order to specify/control DP beamforming/DRX operation.  This is discussed further below. 

Currently, the best source of information about command syntax and options is the source code for these executables.  Each is provided with extensive information in the banner comments at/near the top of the file.


File Inventory / Directory Structure
====================================

MCS/Executive source code is completely contained in the subdirectory src/exec, except for the header file mcs.h which is found in the subdirectory src/common.  When compiled using "make", executables and support files are copied to the subdirectory "exec" (on the same level as "src"; distinct from "src/exec"), from where they should be used.  In other words, "~src/exec" is the source code, and "~exec" is the sandbox.

src/exec/readme.txt
-- This file.

src/exec/makefile
-- "$ make clean; make; make install" compiles everything needed and places executables and necessary support files in the sandbox directory "exec" (on the same level as "src"; distinct from "src/exec").

src/common/mcs.h
-- Header file.  Currently highly redundant with the MCS/Scheduler header file "LWA_MCS.h"; the plan is to eventually converge on this header file (that is, "src/common/mcs.h") some time in the future to avoid potential consistency problems.  

src/exec/me.h
-- Header file specific to MCS/Executive software.

src/exec/mesi.c (the function "mesi()")
src/exec/mesix.c (wrapper for mesi(), providing command line interface)
-- Used to inject commands into MCS/Scheduler's ms_exec process.  This works like MCS/Scheduler's "msei" utility, but has extended capabilities (see above).

src/exec/memdre.c (the function "memdre()")
src/exec/memdrex.c (wrapper for memdre(), providing command line interface)
-- memdre.c is the source code for the function call memdre(), which is used by MCS/Executive to query ms_mdre_ip, the MCS/Scheduler IP-based subsystem MIB interface.  memdrex is included as an executable wrapper for memdre() to facilitate source code development and is not intended for use in routine operation.   If you use MCS/Scheduler's "ms_mdre" executable for something, you should continue to use it as opposed to memdrex.  However, just for the record, memdrex is very similar to ms_mdre, except that it prints out only the MIB entry update time, and not the MIB entry itself; also it shows any error flags returned by memdre(). 

****************************************************
*** That's it for actual MCS/Executive software. ***
****************************************************  
The following programs are *support* programs to facilitate testing, development, integration, and commissioning:
 
src/exec/meos.c (function call)
src/exec/meosx.c (wrapper for meos(), providing command line interface)
-- This is "one-shot" acquisition software.  This automates the process of acquisition from DP, via DR, to a separate directory, all using a single command line.  See additional comment above and below.  

src/exec/mecfg.c   
-- Coefficient file generator: Converts text ".cft" files to binary ".cf" files, suitable for use with mesix to pass the "sint16 COEFF_DATA[16][32]" argument needed for the DP FST command.

src/exec/medfg.c
-- Delay file generator: Converts text ".dft" files to binary ".df" files, suitable for use with mesix to pass the "uint16 BEAM_DELAY[520]" argument needed for the DP BAM command.

src/exec/megfg.c
-- Gains file generator: Converts text ".gft" files to binary ".gf" files, suitable for use with mesix to pass the "sint16 BEAM_GAIN[260][2][2]" argument needed for the DP BAM command

src/exec/test.cft
src/exec/test.dft
src/exec/test.gft
-- These are example input files for use with mecfg, medfg, and megfg, respectively.  There is nothing significant about the values included in the file.  These files are provided solely for convenience in testing the associated software.

Quick Start
===========

In the procedure below, the software is compiled and a simple test is performed to demonstrate the functioning of the software.  NOTE: It is assumed that MCS/Scheduler v.0.9 is available and properly configured, but not yet running.  Also, it is strongly recommended that you run the MCS/TaskProcessor utility "tptc" on the computer on which MCS/Executive is to run, to ensure that time is set correctly and that the PC, OS, and LWA time-handling routines are working properly.

(1)  If not done already, place explode the directories/files from the distribution and cd into the directory src/exec/.

(2)  Make the software (~src/exec$ make).  The executables and various support files are placed in ~/exec. 

(3) Start MCS/Scheduler using the MCS/Scheduler-provided script test9.sh ("~/sch$ sh ./test9.sh" should do it).  This script does the following things: 
-- Launches python scripts which emulate (crudely) the subsystems SHL, ASP, DP, and DR1 through DR5.
-- Brings up MCS/Scheduler with the above-named subsystems.
-- Exits, leaving MCS/Scheduler and the subsystem emulators running.
You can confirm that things are running properly by checking the MCS/Scheduler log file "mselog.txt" (or using the MCS/Scheduler utility "ms_mon"), which should look something like this:

~/sch$ cat mselog.txt
110215 13:55:44  55607  50144955 N I am ms_exec (v.20110208.1) [2]
110215 13:55:44  55607  50144955 N Command line: ms_exec 261120
110215 13:55:44  55607  50144955 N Added subsystem MCS
110215 13:55:44  55607  50144955 N Added subsystem SHL
110215 13:55:44  55607  50144955 N Added subsystem ASP
110215 13:55:44  55607  50144955 N Added subsystem DP_
110215 13:55:44  55607  50144955 N Added subsystem DR1
110215 13:55:44  55607  50144955 N Added subsystem DR2
110215 13:55:44  55607  50144955 N Added subsystem DR3
110215 13:55:44  55607  50144955 N Added subsystem DR4
110215 13:55:44  55607  50144955 N Added subsystem DR5


(4) From the exec ("sandbox") directory, use mesix to see if subsystems are responding.  mesix uses the same syntax as the MCS/Scheduler command "mesi".  Here's an example of commands and responses: 

~/exec$ ./mesix SHL RPT SUMMARY
[102/4756] msei() returned code 0; reference=2
~/exec$ ./mesix ASP RPT SUMMARY
[102/4757] msei() returned code 0; reference=3
~/exec$ ./mesix DP_ RPT SUMMARY
[102/4758] msei() returned code 0; reference=4
~/exec$ ./mesix DR1 RPT SUMMARY
[102/4759] msei() returned code 0; reference=5

Now check mselog.txt again.  The following additional lines appear, indicating that the subsystems are all reporting "SUMMARY" is "NORMAL":

110215 13:58:03  55607  50283486 T         2 1 SHL RPT SUMMARY|
110215 13:58:03  55607  50283486 T         2 2 SHL RPT SUMMARY|
110215 13:58:03  55607  50283555 T         2 3 SHL RPT NORMAL|
110215 13:58:16  55607  50296779 T         3 1 ASP RPT SUMMARY|
110215 13:58:16  55607  50296779 T         3 2 ASP RPT SUMMARY|
110215 13:58:16  55607  50296866 T         3 3 ASP RPT NORMAL|
110215 13:58:22  55607  50302866 T         4 1 DP_ RPT SUMMARY|
110215 13:58:22  55607  50302866 T         4 2 DP_ RPT SUMMARY|
110215 13:58:22  55607  50302942 T         4 3 DP_ RPT NORMAL|
110215 13:58:32  55607  50312667 T         5 1 DR1 RPT SUMMARY|
110215 13:58:32  55607  50312667 T         5 2 DR1 RPT SUMMARY|
110215 13:58:32  55607  50312747 T         5 3 DR1 RPT NORMAL|

(5) You can also use the MCS/Scheduler executable "ms_mdre" confirm that MIB entries are being updated; for example:

~/sch$ ./ms_mdre SHL SUMMARY
NORMAL
110215 13:58:03

(6) mesix can also be used to specify the time at which MCS/Scheduler acts on commands that it receives.  For example:

~/exec$ ./mesix ASP RPT SUMMARY today +10

results in Scheduler running this command 10 seconds from the current time.  In this example, you can confirm this by examining the associated mselog.txt output:

110215 14:00:38  55607  50438792 T         6 1 ASP RPT SUMMARY|
110215 14:00:48  55607  50448791 T         6 2 ASP RPT SUMMARY|
110215 14:00:48  55607  50448867 T         6 3 ASP RPT NORMAL|

Note the command is received by Scheduler at 14:00:38, but not sent to the subsystem until 14:00:48 (10 seconds later).  Alternatively, "today" could be an MJD, and "+10" could be an MPM; Scheduler will then execute the command at this MJD/MPM.  This completely non-blocking; for example, you can specify the command that are to run later first, followed by commands that are to run earlier.  The only limitation is the size of MCS/Scheduler's pending message queue.

(7) That's it for MCS/Executive.  Remember, "memdrex" is not really intended for operational use; use "ms_mdre" instead.  The use of "meosx" for one-shot acquisition from DP is discussed below.  The use of mesix, mecfg, medfg, and megfg for beamforming are also discussed below.

(8) Remember to shut down MCS/Scheduler and the subsystem emulators:
~/exec$ ./mesix MCS SHT
~/exec$ killall -v python


One-Shot Acquisition with meosx 
===============================

meosx makes it possible to do "one-shot" TBW and TBN acquisitions using a single command line.  Here is an example of a TBW acquisition using meosx:
$ ./meosx 1 /dev/sdg1 /home/steve TBW "12 12000000" 
The command line arguments, in order, say:
-- Use DR1
-- Use the "/dev/sdg1" filespace on the DR.  This must be available as an "external device"; see the MCS-DR ICD for details.
-- "/home/steve" means "transfer the resulting file to /home/steve on the local machine"
-- Do TBW
-- The quotes enclose the DP-dictated TBW arguments -- in this case, using 12-bit samples (as opposed to 4-bit samples), and collect 12,000,000 of them.    

Here's an example of a TBN acquisition using meosx:
$ ./meosx 1 /dev/sdg1 /home/steve TBN "74000000 7 28 0 60000"
The command line arguments, in order, say:
-- Use DR1
-- Use the "/dev/sdg1" filespace on the DR.  This must be available as an "external device"; see the MCS-DR ICD for details.
-- "/home/steve" means "transfer the resulting file to /home/steve on the local machine"
-- Do TBN
-- The quotes enclose the DP-dictated TBN arguments -- in this case, 74 MHz center frequency, bandwidth "7", gain "28".  The additional argument "60000" means record for this many milliseconds. 

Here's an example of a DRX acquisition using meosx:
$ ./meosx 2 /dev/sdg1 /home/steve DRX 60000
The command line arguments, in order, say:
-- Use DR2 (note -- for this to make sense, DR2 must be attached to a DP output which is currently configured for DRX.  It is assumed that the appropriate FST, BAM, and DRX commands have already been sent & that DP is already outputting data)
-- Use the "/dev/sdg1" filespace on the DR.  This must be available as an "external device"; see the MCS-DR ICD for details.
-- "/home/steve" means "transfer the resulting file to /home/steve on the local machine"
-- Do DRX
-- Record for 60000 ms (i.e., 60 s). 

meosx automatically does the acquisition, transfers the data from DR to the specified directory, and cleans up after itself.  A transcript of the operation can be viewed for confirmation, logging, or troubleshooting.

See the banner comments in meosx.c for additional details about syntax and operation.  


Monitoring & Control of the DP Subsystem
=========================================

The DP subsystem interface has several unique aspects that make monitoring and control significantly different from that of the other subsystems.  Those attempting to control DP though MCS/Scheduler (using msei in combination with MIB-reading utilities) or MCS/Executive (through mesix) should be aware of these differences.  These can be briefly summarized as follows:
-- Arguments of commands (that is, the DATA field that is sent with each command over the "MCS Common ICD" interface) are raw binary, whereas for all other subsystems these are entirely text.  This has implications for the manner in which commands are sent using msei and mesix, as well as the manner in which data is stored in the MCS-maintained subsystem MIB.
-- In contrast to all other subsystems, DP exposes very little information through its MIB.  This necessitates the addition of "non-ICD MIB entries" to the DP MIB maintained by MCS/Scheduler.  In contrast to ICD-specified MIB entries, which are typically updated as the result of "RPT" commands, non-ICD entries are updated when MCS receives a command response indicating a command has been accepted.  In other words, an ICD-specified MIB entry is information provided directly by the subsystem in response to an MCS query, whereas non-ICD MIB entries is information inferred from commands sent by MCS which were subsequently accepted.
-- The arguments of the DP commands FST and BAM are large raw binary blocks of data which are awkward to obtain directly as command line arguments.  In this case, the names of files that contain the binary data are passed to Scheduler, which replaces the filenames with the data contained in the associated files just before sending the command to DP.

This section provides a brief overview of the monitoring and control of DP, in light of these differences.

(1)  Both msei and mesix are able to send the DP commands "TBN" and "TBW".  For these commands, the raw binary data field is constructed by msei or mesix from a set of command line arguments enclosed in quotes; for example:
$ ./mesix DP_ TBW "0 0 12000000"
$ ./mesix DP_ TBN "74000000 7 28 0"
(See banner comments in the associated source code for additional details of syntax)
When MCS receives response messages indicating that DP has accepted these commands, the associated non-ICD MIB entries are updated.  For example: for TBW, the associated non-ICD MIB indices and labels are:
0.4.1         MCS_TBW_BITS                
0.4.2         MCS_TBW_TRIG_TIME          
0.4.3         MCS_TBW_SAMPLES        
0.4.4         MCS_TBW_REFERENCE      
0.4.5         MCS_TBW_CMD_SENT_MPM       
And for TBN these are:		
0.5.1         MCS_TBN_FREQ                
0.5.2         MCS_TBN_BW                  
0.5.3         MCS_TBN_GAIN               
0.5.4         MCS_TBN_SUB_SLOT            
0.5.5         MCS_TBN_REFERENCE           
0.5.6         MCS_TBN_CMD_SENT_MPM       
These MIB entries can be read and manipulated in exactly the same manner as ICD-specified MIB entries; for example, using the ms_mdre utility. 

(2) mesix (only) can send the DP commands "FST", "BAM", and "DRX".  Examples follow:
$ ./mesix DP_ FST "23 cfile.cf"
$ ./mesix DP_ BAM "1 dfile.df gfile.gf"
$ ./mesix DP_ DRX "1 2 74000000 7 15 0"
See banner comments in the associated source code for specific details of syntax.  However, I wish to note here how these commands are processed by mesix.  The DRX command is handled in exactly the same manner as TBW and TBN; see above.  The FST and BAM commands are handled a little differently.  The DATA field of the FST and BAM commands contain the names of files which contain the raw binary data that DP is expecting.  mesix does not attempt to include this data in the DATA field before sending the command to the MCS/Scheduler ms_exec process.  Instead, MCS/Scheduler reads the specified files and makes the substitution immediately prior to sending the command to DP.  Scheduler assumes that the "cfile.cf" file specified in the FST command is located in a subdirectory called "cfiles"; and that the files "dfile.df" and "gfile.gf" specified in the BAM command are in subdirectories "dfiles" and "gfiles", respectively. When a response message is received indicating that the FST or BAM command is accepted, MCS/
Scheduler updates the associated non-ICD MIB entries with the names of the files containing the data (i.e., *not* the data itself).  The associated non-ICD MIB entries are explained by example below.  

For example, when MCS/Scheduler receives a response message indicating that the FST command shown above has been accepted, it sets the non-ICD MIB entry 0.6.23, called "CF023", to be the string "cfile.cf".  There is one such non-ICD MIB entry for each of the 520 possible channels.  This provides a convenient mechanism for keeping track of which coefficient sets are assigned to which channels, since the filename then can be used as a convenient human-readable shorthand for data that was actually sent.  It is also possible to have DP read back the actual binary data sent with FST commands using subsequent RPT commands, however this is extraordinarily cumbersome (see the DP ICD for details).  DP does not allow binary data sent with BAM command to be read back at all.    

The BAM command works similarly.  For example, when MCS/Scheduler receives a response message indicating that the BAM command shown above has been accepted, it updates non-ICD MIB entries as follows:
MIB index 0.7.1.1 having label "MCS_BEAM1_DFILE" is set to "dfile.df"
MIB index 0.7.1.2 having label "MCS_BEAM1_GFILE" is set to "gfile.gf"

Finally, when Scheduler receives a response message indicating that the DRX command shown above has been accepted, it updates non-ICD MIB entries as follows:
MIB index 0.7.1.4.1 having label MCS_BEAM1_T2_FREQ is set to 74000000.0
MIB index 0.7.1.4.2 having label MCS_BEAM1_T2_BW   is set to 7
MIB index 0.7.1.4.3 having label MCS_BEAM1_T2_GAIN is set to 15

A complete list of DP non-ICD MIB entries can be viewed using the MCS/Scheduler ms_md2t utility.  

(3) The files "cfile.cf", "dfile.df", and "gfile.gf" can be generated using the utilities mecfg, medfg, and megfg respectively.  These utilities accept a file containing text-format description of the desired data, and output the associated raw binary file.  See the banner comments of the associated source codes for details. 


Troubleshooting / Known Bugs
============================

-- In troubleshooting problems that emerge when both MCS/Executive and MCS/Scheduler are in use, the essential first step is to determine whether you are dealing with an MCS/Executive issue or an MCS/Scheduler issue.  If you're not sure, try working through the "Quick Start", "Defined Test Cases", and "Troubleshooting / Known Bugs" sections of the readme provided with MCS/Scheduler to confirm that Scheduler is working properly.

-- FIXME how to setup ssh/scp between machines

Other Notes & Issues 
====================

-- None at this time.


History
=======

Major Changes in Release 0.3:
-----------------------------

1.  "mesi()", and it's associated command line executable "mesix", now support scheduling of commands using date and time arguments.  Examples of allowable date/time arguments include MJD/MPM, "today"/"asap", "today"/MPM, and "today"/+n (where n is the number of seconds into the future at which the command should be executed).  See step 6 in the Quick Start for an example.

2.  "meos()", and it's associated command line executable "meosx", now support DP's DRX mode (previously, only TBW and TBN were supported).  See the section "One-Shot Acquisition with meosx" below for more information.  While it appears this is working properly, DRX-mode acquisition has not yet been tested with the actual DP.  

3.  Significantly improved the function LWA_time2tv(), which should now be much more accurate.

Major Changes in Release 0.2:
-----------------------------

1.  This is the first numbered release.  

2.  mesix now supports the DP commands FST, BAM, and DRX.  There are probably other minor but significant changes with respect to the previous release.

"Pre-release"
-------------

This is a fragmentary pre-release including some functional executables that was distributed in "Joint Release 1" with MCS/Scheduler v.0.7.  The primary purpose of this release was to provide "meosx" for operational use.
